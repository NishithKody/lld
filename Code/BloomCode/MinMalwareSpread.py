class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        
        n = len(graph)
        parent = [0] * n
        size = [0] * n 
        
        for i in range(n):
            parent[i] = i
            size[i] = 1
        
        def find(u):
            if(parent[u]==u):
                return u
            
            leader = find(parent[u])
            parent[u] = leader
            return leader

        def union(u,v):
            pt1 = find(u)
            pt2 = find(v)

            if(pt1 != pt2):
                if(size[pt1]>size[pt2]):
                    parent[pt1] = pt2
                    size[pt2] += size[pt1]
                else:
                    parent[pt2] = pt1
                    size[pt1] += size[pt2]

        for i in range(n):
            for j in range(n):
                if(graph[i][j] == 1):
                    union(i,j)

        infectedCount = defaultdict(int)
        minV = initial[0]

        for i in initial:
            minV = min(i,minV)
            pt = find(i)
            infectedCount[pt] += 1

        res = minV
        resSize = -1

        for i in initial:
            
            infected_parent = find(i)
            count = infectedCount[infected_parent]

            if(count == 1):
                if(size[infected_parent] > resSize):
                    res = i
                    resSize = size[infected_parent]
                elif(size[infected_parent] == resSize):
                    res = min(res, i)
        
        return res
